{
    "title": "recursion",
    "sections": [
        {
            "file": "utop",
            "lang": "ocaml",
            "explanations": [
                {
                    "line": 1,
                    "text": "Recursive functions must be explicitely written with the keyword `rec`. Here is an example with the [Fibonacci sequence](https://en.wikipedia.org/wiki/Fibonacci_number)."
                },
                {
                    "line": 20,
                    "text": "There's an important concept when writing recursive code: **tail optimization**. It means that the compiler can optimize your code if the recursive function doesn't have to remember some state when it calls itself. Without that, Each call creates a new stack and you end up with stack overflows. This is an example of a non-tail optimized recursive function (notice that each call has to remember what `i` is to be able to use the return value of the recursive call."
                },
                {
                    "line": 34,
                    "text": "Finally, here's an example copied from [Daniil Baturin](https://baturin.org/docs/ocaml-faq/) on how to write functions that recursively call one another."
                }
            ]
        }
    ]
}