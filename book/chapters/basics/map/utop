utop # let balances = Map.empty (module String);;
val balances : (string, 'a, String.comparator_witness) Map.t = <abstr>

utop # Map.add balances "david" 2;;
- : (string, int, String.comparator_witness) Map.t Base.Map.Or_duplicate.t =
`Ok <abstr>

utop # let balances = match Map.add balances "david" 2 with
| `Ok x -> x
| `Duplicate -> balances;;
val balances : (string, int, String.comparator_witness) Map.t = <abstr>

utop # let balances = match Map.add balances "david" 3 with
| `Ok x -> x
| `Duplicate -> print_endline "duplicate"; Map.set balances "david" 3;;
duplicate
val balances : (string, int, String.comparator_witness) Map.t = <abstr>
