{
    "title": "rust",
    "sections": [
        {
            "file": "dune",
            "lang": "lisp",
            "explanations": [
                {
                    "line": 0,
                    "text": "We can interact with Rust in the same way we can interact with C: we use dune to build a static library of the rust code, and we later link this library to our ocaml code."
                },
                {
                    "line": 1,
                    "text": "The magic happens within the `_build` directory, where dune will copy and build things out. Let's avoid copying the entire `target` repository that cargo creates."
                },
                {
                    "line": 3,
                    "text": "Let's add a rule to build the rust static library every time we rune a dune command."
                },
                {
                    "line": 4,
                    "text": "`target` specifies the file produced by the rule. You can also use `targets` if you need to list several files."
                },
                {
                    "line": 5,
                    "text": "dune will avoid re-running this rule every time, that is unless one of the dependencies listed in `deps` has changed."
                },
                {
                    "line": 6,
                    "text": "Here's the actual content of the rule, `progn` lists a series of commands that have to be executed in sequence. In our example, we run `cargo build` on our project, and we then extract the produced library."
                },
                {
                    "line": 11,
                    "text": "Let's define the ocaml executable that will call the Rust code. Notice that it lists the library in the `foreign_archives` field."
                }
            ]
        },
        {
            "file": "Cargo.toml",
            "lang": "toml",
            "explanations": [
                {
                    "line": 1,
                    "text": "Here's our Rust library defined in a typical `Cargo.toml` file. Notice that the library name will prepend the word `lib` to the name of the library, as well as convert any hyphen to an underscore (typical in Rust)."
                },
                {
                    "line": 8,
                    "text": "As we're creating a static library to be linked with our OCaml code, we need to specify that."
                },
                {
                    "line": 1,
                    "text": "The [ocaml](https://crates.io/crates/ocaml) crate is used to facilitate exporting and importing types and functions to OCaml."
                }
            ]
        },
        {
            "file": "lib.rs",
            "lang": "rust",
            "explanations": [
                {
                    "line": 1,
                    "text": "The derive macros `ocaml::IntoValue` and `ocaml::FromValue` allow you to convert entire types to OCaml types, which allows you to store them on the OCaml heap and have the OCaml's garbage collector handle them."
                },
                {
                    "line": 9,
                    "text": "The `ocaml::func` derive macro can be used to export functions to OCaml. Here the returned value will be converted to an OCaml type thanks to the `ocaml::IntoValue` a few lines above."
                },
                {
                    "line": 30,
                    "text": "The `ocaml::custom!` macro can be used to store custom types on the OCaml heap. As these will be ignored by the OCaml garbage collector, it is important to define a finalizer that will drop the value when it is garbage-collected. You have to use this when you can't implement ocaml::FromValue and ocaml::IntoValue for some type in your structure."
                }
            ]
        },
        {
            "file": "main.ml",
            "lang": "ocaml",
            "explanations": [
                {
                    "line": 9,
                    "text": "We can re-define the Rust structure in OCaml with our own record type. Note that the name of that type doesn't have to match the Rust name."
                },
                {
                    "line": 9,
                    "text": "External functions have their signatures defined with the `external` keyword."
                }
            ]
        },
        {
            "file": "console",
            "lang": "console",
            "explanations": [
                {
                    "line": 1,
                    "text": "..."
                }
            ]
        }
    ]
}