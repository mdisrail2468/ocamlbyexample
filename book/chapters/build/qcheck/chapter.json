{
    "title": "property tests",
    "sections": [
        {
            "file": "console",
            "lang": "console",
            "explanations": [
                {
                    "line": 1,
                    "text": "QCheck is a property-based testing framework: it allows you to generate arbitrary values of your custom types, and test properties of your choice on them (e.g. does my Car type always contain at least 4 wheels). For this example, we will test the [hexstring](https://github.com/mimoo/hexstring) library."
                }
            ]
        },
        {
            "file": "tests.ml",
            "lang": "ocaml",
            "explanations": [
                {
                    "line": 1,
                    "text": "Let's create an `encode_decode` property test (1000 of them actually) that will generate random strings and enforce that they can be hex encoded and then decoded to the same string."
                },
                {
                    "line": 7,
                    "text": "Let's create another property test, that will generate valid hexadecimal strings and make sure that we can decode them (and re-encode them to the same hexstring)."
                },
                {
                    "line": 8,
                    "text": "To do that, we first need to tell QCheck how to generate an element of an hexstring : something that is either in the range a-f or the range 0-9."
                },
                {
                    "line": 14,
                    "text": "Hexstrings are also even in side, never odd, so let's precise that using a natural number (`QCheck.Gen.nat`) and multiplying it by 2. By using `QCheck.Gen.map` we can transform generators."
                },
                {
                    "line": 17,
                    "text": "We finally create the **value generator** that will be used by QCheck to create property tests."
                },
                {
                    "line": 21,
                    "text": "We can use this generator of valid hexadecimal strings to ensure that decoding (and then re-encoding) always work."
                },
                {
                    "line": 30,
                    "text": "Finally, we can run these tests using QCheck's provided helper `run_tests_main` as main function of our executable."
                }
            ]
        },
        {
            "file": "dune",
            "lang": "lisp",
            "explanations": [
                {
                    "line": 7,
                    "text": "So that property tests can be included by the `dune runtest` commands, and in turn in test coverage (see next section), you can add an extra rule to your `dune` file."
                }
            ]
        }
    ]
}