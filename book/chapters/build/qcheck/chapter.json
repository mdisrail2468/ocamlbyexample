{
    "title": "property tests",
    "sections": [
        {
            "file": "console",
            "lang": "console",
            "explanations": [
                {
                    "line": 1,
                    "text": "QCheck is a property-based testing framework: it allows you to generate arbitrary values of your custom types, and test properties of your choice on them (e.g. does my Car type always contain at least 4 wheels)."
                }
            ]
        },
        {
            "file": "tests.ml",
            "lang": "ocaml",
            "explanations": [
                {
                    "line": 1,
                    "text": "We can create a thousand tests that will generate random strings (using the `QCheck.string` generator) and enforce that they can be hex encoded and then decoded to the same string."
                },
                {
                    "line": 8,
                    "text": "We can create our own value generators. For example, here we create an hexadecimal string (that isn't necessarily of even length). `QCheck.Gen.char_range` is used to specify a range of characters to generate, `QCHeck.Gen.oneof` is used to generate a value using one of the listed generators, and `QCheck.Gen.list_size` generates a list of a size generated by `QCheck.Gen.nat` using elements generated by our custom generator."
                },
                {
                    "line": 16,
                    "text": "We can use this generator of almost-valid hexadecimal string to ensure that decoding always work unless the string is of odd length."
                },
                {
                    "line": 32,
                    "text": "Finally, we can run these tests using QCheck's provided helper `run_tests_main` as main function of our executable."
                }
            ]
        },
        {
            "file": "dune",
            "lang": "lisp",
            "explanations": [
                {
                    "line": 7,
                    "text": "So that property tests can be included by the `dune runtest` commands, and in turn in test coverage (see next section), you can add an extra rule to your `dune` file."
                }
            ]
        }
    ]
}